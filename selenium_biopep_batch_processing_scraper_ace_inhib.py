#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
BIOPEP UWM Selenium Automation Script
Automatyzuje proces analizy peptyd√≥w na stronie BIOPEP UWM
"""

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait, Select
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException, WebDriverException
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
import os
from datetime import datetime

DEFAULT_TIMEOUT = 1000  # w sekundach

class BIOPEPAnalyzer:
    def __init__(self, headless=False, timeout=DEFAULT_TIMEOUT):
        self.driver = None
        self.wait = None
        self.results = []
        self.headless = headless
        self.timeout = timeout
        self.base_folder = "/home/marta/Desktop/biobloom_proteomic_data/accurate_proteomes"

    def setup_driver(self):
        try:
            print("üîß Inicjalizacja drivera przeglƒÖdarki...")
            options = webdriver.ChromeOptions()
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            options.add_argument('--disable-gpu')
            options.add_argument('--user-agent=Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36')
            if self.headless:
                options.add_argument('--headless=new')
                print("üîß Uruchamianie w trybie headless")
            else:
                print("üîß Uruchamianie z interfejsem graficznym")
            service = Service(ChromeDriverManager().install())
            self.driver = webdriver.Chrome(service=service, options=options)

            # üëâ Dodane ustawienie globalnego timeoutu dla komend WebDrivera
            self.driver.command_executor.set_timeout(self.timeout)

            self.driver.set_page_load_timeout(self.timeout + 60)
            self.wait = WebDriverWait(self.driver, self.timeout)
            print("‚úì Driver przeglƒÖdarki zosta≈Ç pomy≈õlnie zainicjalizowany")
        except WebDriverException as e:
            print(f"‚ùå B≈ÇƒÖd podczas inicjalizacji przeglƒÖdarki: {e}")
            raise

    def get_file_path(self):
        while True:
            filename = input("Podaj nazwƒô pliku FASTA (bez rozszerzenia): ").strip()
            if not filename:
                print("‚ùå Nazwa pliku nie mo≈ºe byƒá pusta!")
                continue
            full_path = os.path.join(self.base_folder, f"{filename}.fasta")
            if os.path.exists(full_path):
                print(f"‚úì Znaleziono plik: {full_path}")
                return full_path
            else:
                print(f"‚ùå Plik {full_path} nie istnieje!")
                retry = input("Czy chcesz spr√≥bowaƒá ponownie? (t/n): ").lower()
                if retry != 't':
                    return None

    def navigate_to_biopep(self):
        url = "https://biochemia.uwm.edu.pl/biopep/batch_processing.php?but_processing.x=61&but_processing.y=16"
        try:
            print(f"üåê Nawigacja do: {url}")
            self.driver.get(url)
            self.wait.until(EC.presence_of_element_located((By.TAG_NAME, "body")))
            print("‚úì Strona BIOPEP zosta≈Ça za≈Çadowana")
        except TimeoutException:
            print("‚ùå Timeout podczas ≈Çadowania strony BIOPEP")
            raise

    def read_fasta_file(self, file_path):
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            print(f"‚úì Przeczytano plik FASTA: {os.path.basename(file_path)} ({len(content)} znak√≥w)")
            return content
        except Exception as e:
            print(f"‚ùå B≈ÇƒÖd podczas czytania pliku FASTA: {e}")
            raise

    def configure_analysis_settings(self, file_path):
        try:
            print("‚öôÔ∏è Konfigurowanie ustawie≈Ñ analizy...")
            fasta_content = self.read_fasta_file(file_path)

            # Odznacz niepotrzebne checkboxy
            checkboxes_to_uncheck = ["profiles", "profilemarker", "calculationsatas", "profileepi"]
            for checkbox_value in checkboxes_to_uncheck:
                try:
                    checkbox = self.driver.find_element(By.CSS_SELECTOR, f"input[name='wybor[]'][value='{checkbox_value}']")
                    if checkbox.is_selected():
                        checkbox.click()
                        print(f"‚úì Odklikniƒôto: {checkbox_value}")
                except NoSuchElementException:
                    pass

            # Zaznacz wymagane checkboxy
            required_checkboxes = ["calculationsab", "enzymesaction", "searchfragments", "calculationsdvb"]
            for option in required_checkboxes:
                try:
                    checkbox = self.driver.find_element(By.CSS_SELECTOR, f"input[name='wybor[]'][value='{option}']")
                    if not checkbox.is_selected():
                        checkbox.click()
                    print(f"‚úì Zaznaczono opcjƒô: {option}")
                except NoSuchElementException:
                    pass

            # Aktywno≈õƒá
            try:
                activity_select = Select(self.driver.find_element(By.NAME, "sel_activity"))
                activity_select.select_by_value("ACE inhibitor")
                print("‚úì Wybrano aktywno≈õƒá: ACE inhibitor")
            except NoSuchElementException:
                pass

            # Wprowadzanie sekwencji
            try:
                textarea = self.wait.until(EC.presence_of_element_located((By.NAME, "txt_seq")))
                self.driver.execute_script("arguments[0].value = arguments[1];", textarea, fasta_content)
                print(f"‚úì Wprowadzono sekwencje do textarea ({len(fasta_content)} znak√≥w)")
            except TimeoutException:
                print("‚ùå Nie znaleziono pola textarea dla sekwencji")
                raise

            # Enzymy
            enzyme_settings = {"enz1": "13", "enz2": "12", "enz3": "11"}
            enzyme_names = {"enz1": "pepsin (pH 1.3)", "enz2": "trypsin", "enz3": "chymotrypsin (A)"}
            for enz_name, enz_value in enzyme_settings.items():
                try:
                    enzyme_select = Select(self.driver.find_element(By.NAME, enz_name))
                    enzyme_select.select_by_value(enz_value)
                    print(f"‚úì Wybrano {enz_name}: {enzyme_names[enz_name]} (warto≈õƒá: {enz_value})")
                except NoSuchElementException:
                    pass

            # Baza danych
            try:
                database_select = self.driver.find_element(By.NAME, "sel_database")
                database_sel = Select(database_select)
                database_sel.select_by_value("pep")
                print("‚úì Wybrano bazƒô danych: pep")
            except NoSuchElementException:
                pass

            print("‚úÖ Konfiguracja ustawie≈Ñ zako≈Ñczona pomy≈õlnie")
        except Exception as e:
            print(f"‚ùå B≈ÇƒÖd podczas konfigurowania ustawie≈Ñ: {e}")
            raise

    def start_analysis(self):
        try:
            print("üöÄ Uruchamianie analizy...")
            report_button = self.wait.until(
                EC.element_to_be_clickable((By.NAME, "but_report"))
            )
            report_button.click()
            print("‚úì Klikniƒôto przycisk uruchamiajƒÖcy analizƒô")
            print("‚è≥ Oczekiwanie na wyniki analizy...")

            # Czekamy a≈º pojawi siƒô formularz wynikowy
            self.wait.until(
                EC.presence_of_element_located(
                    (By.CSS_SELECTOR, 'form[name="fm_action"][action="batch_report_cutting_for_seq"] table.table-out')
                )
            )

            print("‚úì Formularz wynikowy zosta≈Ç za≈Çadowany")

        except TimeoutException:
            print("‚ùå Timeout podczas oczekiwania na wyniki")
            raise

    def extract_sequences(self):
        try:
            print("üîç Analizowanie wynik√≥w...")
            tables = self.driver.find_elements(By.CSS_SELECTOR, "form[name='fm_action'] table.table-out")
            if not tables:
                print("‚ùå Nie znaleziono tabeli z wynikami")
                return
            print(f"‚úì Znaleziono {len(tables)} tabel do analizy")

            filtered_tables = []
            for table in tables:
                rows = table.find_elements(By.CSS_SELECTOR, "tr")
                if not rows:
                    continue

                # znajd≈∫ nag≈Ç√≥wek
                header_row = None
                header_idx = 0
                for idx, tr in enumerate(rows):
                    if tr.find_elements(By.TAG_NAME, "th"):
                        header_row = tr
                        header_idx = idx
                        break
                if header_row is None:
                    header_row = rows[0]
                    header_idx = 0

                header_cells = header_row.find_elements(By.TAG_NAME, "th")
                if not header_cells:
                    header_cells = header_row.find_elements(By.TAG_NAME, "td")

                headers = [" ".join(c.text.split()).strip().lower() for c in header_cells]
                if any("sequence" in h for h in headers):
                    filtered_tables.append((table, rows, headers, header_idx))

            print(f"‚úì Do dalszej analizy wybrano {len(filtered_tables)} tabel z kolumnƒÖ 'Sequence'")

            for table, rows, headers, header_idx in filtered_tables:
                seq_idx = None
                act_idx = None
                for i, h in enumerate(headers):
                    if seq_idx is None and "sequence" in h:
                        seq_idx = i
                    if act_idx is None and "activity" in h:
                        act_idx = i

                if seq_idx is None or act_idx is None:
                    print("‚ö†Ô∏è Pomijam tabelƒô: brak wymaganych kolumn 'Sequence' i/lub 'Activity'")
                    continue

                data_rows = rows[header_idx + 1:]
                for row in data_rows:
                    cells = row.find_elements(By.TAG_NAME, "td")
                    if not cells or len(cells) <= max(seq_idx, act_idx):
                        continue

                    activity = cells[act_idx].text.strip()
                    if "ace inhibitor" in activity.lower():
                        sequence = cells[seq_idx].text.strip()
                        if sequence and sequence not in self.results:
                            self.results.append(sequence)
                            print(f"‚úì Znaleziono sekwencjƒô: {sequence}")

            if not self.results:
                print("‚ö†Ô∏è Nie znaleziono sekwencji z aktywno≈õciƒÖ 'ACE inhibitor'")

        except Exception as e:
            print(f"‚ùå B≈ÇƒÖd podczas wyodrƒôbniania sekwencji: {e}")
            raise

    def save_results(self, species_name):
        try:
            if not self.results:
                print("‚ö†Ô∏è Brak wynik√≥w do zapisania")
                return
            timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
            # Dodanie nazwy gatunku do nazwy pliku
            file_path = os.path.join(self.base_folder, f"biopep_results_{species_name}_{timestamp}.txt")
            with open(file_path, 'w', encoding='utf-8') as f:
                for seq in self.results:
                    f.write(seq + "\n")
            print(f"üíæ Wyniki zapisano w pliku: {file_path}")
        except Exception as e:
            print(f"‚ùå B≈ÇƒÖd podczas zapisywania wynik√≥w: {e}")

    def close_driver(self):
        if self.driver:
            self.driver.quit()
            print("üö™ Zamkniƒôto przeglƒÖdarkƒô")


import sys

def main():
    # ‚úÖ Zapytaj u≈ºytkownika czy chce tryb headless
    headless_input = input("Czy uruchomiƒá w trybie headless? (t/n): ").strip().lower()
    headless_mode = headless_input == 't'

    analyzer = BIOPEPAnalyzer(headless=headless_mode)
    analyzer.setup_driver()
    try:
        file_path = analyzer.get_file_path()
        if not file_path:
            print("‚ùå Nie podano pliku. Ko≈Ñczenie programu.")
            return

        # WyciƒÖgniƒôcie nazwy gatunku z nazwy pliku (bez folderu i rozszerzenia)
        species_name = os.path.splitext(os.path.basename(file_path))[0]

        analyzer.navigate_to_biopep()
        analyzer.configure_analysis_settings(file_path)
        analyzer.start_analysis()
        analyzer.extract_sequences()
        analyzer.save_results(species_name)
    finally:
        analyzer.close_driver()


if __name__ == "__main__":
    main()

